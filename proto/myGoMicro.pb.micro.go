// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/myGoMicro.proto

package myGoMicro

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyGoMicro service

func NewMyGoMicroEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyGoMicro service

type MyGoMicroService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (MyGoMicro_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (MyGoMicro_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (MyGoMicro_BidiStreamService, error)
}

type myGoMicroService struct {
	c    client.Client
	name string
}

func NewMyGoMicroService(name string, c client.Client) MyGoMicroService {
	return &myGoMicroService{
		c:    c,
		name: name,
	}
}

func (c *myGoMicroService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "MyGoMicro.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGoMicroService) ClientStream(ctx context.Context, opts ...client.CallOption) (MyGoMicro_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "MyGoMicro.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &myGoMicroServiceClientStream{stream}, nil
}

type MyGoMicro_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*ClientStreamResponse, error)
	Send(*ClientStreamRequest) error
}

type myGoMicroServiceClientStream struct {
	stream client.Stream
}

func (x *myGoMicroServiceClientStream) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(ClientStreamResponse)
	err := x.RecvMsg(r)
	return r, err
}

func (x *myGoMicroServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *myGoMicroService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (MyGoMicro_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "MyGoMicro.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &myGoMicroServiceServerStream{stream}, nil
}

type MyGoMicro_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type myGoMicroServiceServerStream struct {
	stream client.Stream
}

func (x *myGoMicroServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *myGoMicroServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myGoMicroService) BidiStream(ctx context.Context, opts ...client.CallOption) (MyGoMicro_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "MyGoMicro.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &myGoMicroServiceBidiStream{stream}, nil
}

type MyGoMicro_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type myGoMicroServiceBidiStream struct {
	stream client.Stream
}

func (x *myGoMicroServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *myGoMicroServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *myGoMicroServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MyGoMicro service

type MyGoMicroHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, MyGoMicro_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, MyGoMicro_ServerStreamStream) error
	BidiStream(context.Context, MyGoMicro_BidiStreamStream) error
}

func RegisterMyGoMicroHandler(s server.Server, hdlr MyGoMicroHandler, opts ...server.HandlerOption) error {
	type myGoMicro interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type MyGoMicro struct {
		myGoMicro
	}
	h := &myGoMicroHandler{hdlr}
	return s.Handle(s.NewHandler(&MyGoMicro{h}, opts...))
}

type myGoMicroHandler struct {
	MyGoMicroHandler
}

func (h *myGoMicroHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.MyGoMicroHandler.Call(ctx, in, out)
}

func (h *myGoMicroHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.MyGoMicroHandler.ClientStream(ctx, &myGoMicroClientStreamStream{stream})
}

type MyGoMicro_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
}

type myGoMicroClientStreamStream struct {
	stream server.Stream
}

func (x *myGoMicroClientStreamStream) SendAndClose(in *ClientStreamResponse) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *myGoMicroClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *myGoMicroHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MyGoMicroHandler.ServerStream(ctx, m, &myGoMicroServerStreamStream{stream})
}

type MyGoMicro_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type myGoMicroServerStreamStream struct {
	stream server.Stream
}

func (x *myGoMicroServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *myGoMicroServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *myGoMicroHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.MyGoMicroHandler.BidiStream(ctx, &myGoMicroBidiStreamStream{stream})
}

type MyGoMicro_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type myGoMicroBidiStreamStream struct {
	stream server.Stream
}

func (x *myGoMicroBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *myGoMicroBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *myGoMicroBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myGoMicroBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myGoMicroBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *myGoMicroBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
