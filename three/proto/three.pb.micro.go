// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/three.proto

package three

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Three service

func NewThreeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Three service

type ThreeService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Three_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Three_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Three_BidiStreamService, error)
}

type threeService struct {
	c    client.Client
	name string
}

func NewThreeService(name string, c client.Client) ThreeService {
	return &threeService{
		c:    c,
		name: name,
	}
}

func (c *threeService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Three.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threeService) ClientStream(ctx context.Context, opts ...client.CallOption) (Three_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Three.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &threeServiceClientStream{stream}, nil
}

type Three_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type threeServiceClientStream struct {
	stream client.Stream
}

func (x *threeServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *threeServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *threeServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *threeService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Three_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Three.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &threeServiceServerStream{stream}, nil
}

type Three_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type threeServiceServerStream struct {
	stream client.Stream
}

func (x *threeServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *threeServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *threeServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *threeService) BidiStream(ctx context.Context, opts ...client.CallOption) (Three_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Three.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &threeServiceBidiStream{stream}, nil
}

type Three_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type threeServiceBidiStream struct {
	stream client.Stream
}

func (x *threeServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *threeServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *threeServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *threeServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Three service

type ThreeHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Three_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Three_ServerStreamStream) error
	BidiStream(context.Context, Three_BidiStreamStream) error
}

func RegisterThreeHandler(s server.Server, hdlr ThreeHandler, opts ...server.HandlerOption) error {
	type three interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Three struct {
		three
	}
	h := &threeHandler{hdlr}
	return s.Handle(s.NewHandler(&Three{h}, opts...))
}

type threeHandler struct {
	ThreeHandler
}

func (h *threeHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ThreeHandler.Call(ctx, in, out)
}

func (h *threeHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.ThreeHandler.ClientStream(ctx, &threeClientStreamStream{stream})
}

type Three_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type threeClientStreamStream struct {
	stream server.Stream
}

func (x *threeClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *threeClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *threeHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ThreeHandler.ServerStream(ctx, m, &threeServerStreamStream{stream})
}

type Three_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type threeServerStreamStream struct {
	stream server.Stream
}

func (x *threeServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *threeServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *threeHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.ThreeHandler.BidiStream(ctx, &threeBidiStreamStream{stream})
}

type Three_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type threeBidiStreamStream struct {
	stream server.Stream
}

func (x *threeBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *threeBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *threeBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *threeBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *threeBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *threeBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
